/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/assets/ct_scan_lung.glb -T 
Files: public/assets/ct_scan_lung.glb [16.25MB] > /Users/flatironschool/Development/projects--2024/point-cloud-segmentation-demo/ct_scan_lung.glb [16.24MB] (0%)
Author: Mesheritage (https://sketchfab.com/Mesheritage)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/ct-scan-lung-10943d7029094158aee1b3afad72a7bd
Title: CT scan lung
*/

import React, { useRef, useEffect } from 'react'
import * as THREE from 'three'
import { useGLTF, useTexture, useHelper } from '@react-three/drei'
import { useControls } from 'leva'
import { useCanvas } from '../../../context/CanvasContext'


export default function CtScanLung(props) {
	const { setModelSize } = useCanvas()

	const { nodes, materials } = useGLTF(process.env.PUBLIC_URL + '/assets/ct_scan_lung.glb')

	const sprite = useTexture(process.env.PUBLIC_URL + '/assets/textures/spark1.png')

	const model = useRef()
	const matRef = useRef()

	// const [pointCount, setPointCount] = useState(nodes.Object_2.geometry.attributes.position.data.count)

	function getLargestComponent(vector) {
		return Math.max(vector.x, vector.y, vector.z)
	}

	useEffect(() => {
		if (!model.current) return

		let object = model.current

		object.updateMatrixWorld()

		const box = new THREE.Box3().setFromObject(object)
		// const size = box.getSize(new THREE.Vector3()).length()
		const center = box.getCenter(new THREE.Vector3())
		
		object.position.x -= center.x
		object.position.y -= center.y
		object.position.z -= center.z


		// Calculate the size
		const sizeTest = new THREE.Vector3()
		box.getSize(sizeTest)

		const largestValue = getLargestComponent(sizeTest)

		// console.log('%clargestValue', 'color:red;font-size:14px;', largestValue)
		// console.log('%csize', 'color:red;font-size:14px;', size)

		// console.log('Model dimensions:', sizeTest)
		// console.log('Width:', sizeTest.x)
		// console.log('Height:', sizeTest.y)
		// console.log('Depth:', sizeTest.z)

		// setModelSize(sizeTest)
		setModelSize(largestValue)
	}, [model, setModelSize])

	// useHelper(model, THREE.BoxHelper, 'cyan')

	// const scanMaterial = useControls(
	// 	'Scan Material',
	// 	{
	// 		alphaTest: {
	// 			label: 'alphaTest',
	// 			value: 0,
	// 			min: 0,
	// 			max: 1,
	// 		},
	// 	},
	// 	{
	// 		color: 'red',
	// 	}
	// )

	return (
		<group {...props} dispose={null}>
			<group
				ref={model}
				// scale={0.005}
				rotation={[-Math.PI / 2, 0, 0]}>
				<points
					// scale={0.005}
					// rotation={[-Math.PI / 2, 0, 0]}
					geometry={nodes.Object_2.geometry}
					material={materials['Scene_-_Root']}
					material-sizeAttenuation={true}
					material-vertexColors={true}
					material-size={1.5}
					material-transparent={true}
					material-depthWrite={false}
					material-depthTest={true}
					// material-alphaTest={scanMaterial.alphaTest}
					material-map={sprite}
					material-blending={THREE.AdditiveBlending}
					renderOrder={-1}>
					{/* <pointsMaterial
						ref={matRef}
						vertexColors
						size={1}
						sizeAttenuation={true}
						// alphaTest={0.5}
						alphaTest={scanMaterial.alphaTest}
						map={sprite}
						transparent={true}
						depthWrite={true}
						depthTest={false}
						blending={THREE.AdditiveBlending}
					/> */}
				</points>
				<points geometry={nodes.Object_3.geometry} material={materials['Scene_-_Root']} />
				<points geometry={nodes.Object_4.geometry} material={materials['Scene_-_Root']} />
				<points geometry={nodes.Object_5.geometry} material={materials['Scene_-_Root']} />
				<points geometry={nodes.Object_6.geometry} material={materials['Scene_-_Root']} />
				<points geometry={nodes.Object_7.geometry} material={materials['Scene_-_Root']} />
				<points geometry={nodes.Object_8.geometry} material={materials['Scene_-_Root']} />
				<points geometry={nodes.Object_9.geometry} material={materials['Scene_-_Root']} />
				<points geometry={nodes.Object_10.geometry} material={materials['Scene_-_Root']} />
			</group>
		</group>
	)
}

useGLTF.preload(process.env.PUBLIC_URL + '/assets/ct_scan_lung.glb')
